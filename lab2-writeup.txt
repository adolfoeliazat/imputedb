* Design decisions

** Page eviction policy

I used an LRU cache for the implementation of BufferPool. When a page is retrieved from
the buffer pool or a tuple is added or deleted from a page, that page is put on the front
of the LRU queue. When a page is evicted, it is selected from the end of the queue.

** Join algorithm

I implemented a nested loops join.

* API changes

None.

* Missing code

None.

* Time spent

10-12 hours